const { chromium } = require("playwright");
const cheerio = require("cheerio");
const fs = require("fs").promises;
const path = require("path");

/**
 * ‰∏ú‰∫¨Ëä±ÁÅ´Â§ß‰ºöÊï∞ÊçÆÊõ¥Êñ∞Âô®
 * ‰ªéWalkerPlusÊäìÂèñÊúÄÊñ∞Êï∞ÊçÆÂπ∂Êõ¥Êñ∞È°µÈù¢Êñá‰ª∂
 */
class TokyoHanabiUpdater {
  constructor() {
    this.baseUrl = "https://hanabi.walkerplus.com/launch/ar0313/";
    this.targetFile = path.join(
      __dirname,
      "../../src/app/tokyo/hanabi/page.tsx"
    );
    this.browser = null;
    this.page = null;
  }

  async init() {
    console.log("üöÄ ÂêØÂä®ÊµèËßàÂô®...");
    this.browser = await chromium.launch({
      headless: true,
      args: ["--no-sandbox", "--disable-setuid-sandbox"],
    });
    this.page = await this.browser.newPage();

    // ËÆæÁΩÆÁî®Êà∑‰ª£ÁêÜ
    await this.page.setExtraHTTPHeaders({
      "User-Agent":
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
    });
  }

  async scrapeHanabiData() {
    console.log("üì° ËÆøÈóÆWalkerPlus‰∏ú‰∫¨Ëä±ÁÅ´È°µÈù¢...");
    await this.page.goto(this.baseUrl, { waitUntil: "networkidle" });

    // Á≠âÂæÖÈ°µÈù¢Âä†ËΩΩÂÆåÊàê
    await this.page.waitForSelector("main", { timeout: 10000 });

    const html = await this.page.content();
    const $ = cheerio.load(html);

    const hanabiData = [];

    // ÊäìÂèñËä±ÁÅ´Â§ß‰ºöÂàóË°®
    $("main li").each((index, element) => {
      const $item = $(element);
      const $link = $item.find("a");

      if ($link.length === 0) return;

      const title = $item.find("h2").text().trim();
      if (!title) return;

      // ÊèêÂèñÂü∫Êú¨‰ø°ÊÅØ
      const description = $item.find("h3").text().trim();
      const location = $item.find('div:contains("Êù±‰∫¨ÈÉΩ")').text().trim();

      // ÊèêÂèñÊó•Êúü
      const dateText = $item.find('div:contains("ÊúüÈñìÔºö")').text();
      const dateMatch = dateText.match(/ÊúüÈñìÔºö(.+)/);
      const date = dateMatch ? dateMatch[1].trim() : "";

      // ÊèêÂèñËßÇ‰ºóÊï∞
      const crowdText = $item.find('li:contains("‰æãÂπ¥„ÅÆ‰∫∫Âá∫Ôºö")').text();
      const crowdMatch = crowdText.match(/‰æãÂπ¥„ÅÆ‰∫∫Âá∫Ôºö(.+)/);
      const expectedVisitors = crowdMatch ? crowdMatch[1].trim() : "";

      // ÊèêÂèñËä±ÁÅ´Êï∞
      const fireworksText = $item.find('li:contains("Êâì„Å°‰∏ä„ÅíÊï∞Ôºö")').text();
      const fireworksMatch = fireworksText.match(/Êâì„Å°‰∏ä„ÅíÊï∞Ôºö(.+)/);
      const fireworksCount = fireworksMatch ? fireworksMatch[1].trim() : "";

      // ÊèêÂèñËØ¶ÁªÜÂú∞ÁÇπ
      const locationText = $item
        .find("div")
        .filter((i, el) => {
          return $(el).text().includes("Êù±‰∫¨ÈÉΩ„Éª");
        })
        .text()
        .trim();

      if (title && (date || expectedVisitors || fireworksCount)) {
        hanabiData.push({
          title,
          description,
          date,
          location: locationText || location,
          expectedVisitors,
          fireworksCount,
          rawHtml: $item.html(), // ‰øùÂ≠òÂéüÂßãHTMLÁî®‰∫éË∞ÉËØï
        });
      }
    });

    console.log(`‚úÖ ÊàêÂäüÊäìÂèñ ${hanabiData.length} ‰∏™Ëä±ÁÅ´Â§ß‰ºöÊï∞ÊçÆ`);
    return hanabiData;
  }

  async updatePageFile(hanabiData) {
    console.log("üìù ËØªÂèñÁé∞ÊúâÈ°µÈù¢Êñá‰ª∂...");
    const fileContent = await fs.readFile(this.targetFile, "utf8");

    // ÂàõÂª∫Êò†Â∞ÑË°®ÔºåÂ∞ÜWalkerPlusÊï∞ÊçÆÊò†Â∞ÑÂà∞Áé∞ÊúâÊ¥ªÂä®
    const mappings = this.createMappings(hanabiData);

    let updatedContent = fileContent;
    let updateCount = 0;

    // Êõ¥Êñ∞ÊØè‰∏™Êò†Â∞ÑÁöÑÊ¥ªÂä®
    for (const [walkerData, existingId] of mappings) {
      if (existingId) {
        const updated = this.updateEventData(
          updatedContent,
          existingId,
          walkerData
        );
        if (updated !== updatedContent) {
          updatedContent = updated;
          updateCount++;
          console.log(`‚úÖ Êõ¥Êñ∞Ê¥ªÂä®: ${existingId} -> ${walkerData.title}`);
        }
      }
    }

    if (updateCount > 0) {
      await fs.writeFile(this.targetFile, updatedContent, "utf8");
      console.log(`üéâ ÊàêÂäüÊõ¥Êñ∞ ${updateCount} ‰∏™Ê¥ªÂä®ÁöÑÊï∞ÊçÆ`);
    } else {
      console.log("‚ÑπÔ∏è Ê≤°ÊúâÊâæÂà∞ÈúÄË¶ÅÊõ¥Êñ∞ÁöÑÊï∞ÊçÆ");
    }

    return updateCount;
  }

  createMappings(walkerData) {
    // ÂàõÂª∫WalkerPlusÊï∞ÊçÆ‰∏éÁé∞ÊúâÊ¥ªÂä®IDÁöÑÊò†Â∞Ñ
    const mappings = [];

    for (const data of walkerData) {
      let existingId = null;

      // Ê†πÊçÆÊ†áÈ¢òÂåπÈÖçÁé∞ÊúâÊ¥ªÂä®
      if (data.title.includes("ÈöÖÁî∞Â∑ùËä±ÁÅ´Â§ß‰ºö")) {
        existingId = "sumida-river-48";
      } else if (data.title.includes("ËëõÈ£æÁ¥çÊ∂ºËä±ÁÅ´Â§ß‰ºö")) {
        existingId = "katsushika-59";
      } else if (data.title.includes("„ÅÑ„Åü„Å∞„ÅóËä±ÁÅ´Â§ß‰ºö")) {
        existingId = "itabashi-66";
      } else if (data.title.includes("Ë∂≥Á´ã„ÅÆËä±ÁÅ´")) {
        existingId = "adachi-47";
      } else if (data.title.includes("Êù±‰∫¨Á´∂È¶¨Â†¥Ëä±ÁÅ´")) {
        existingId = "tokyo-keiba-2025";
      } else if (data.title.includes("Ê±üÊà∏Â∑ùÂå∫Ëä±ÁÅ´Â§ß‰ºö")) {
        existingId = "edogawa-50";
      } else if (data.title.includes("Á•ûÂÆÆÂ§ñËãëËä±ÁÅ´Â§ß‰ºö")) {
        existingId = "jingu-gaien-2025";
      } else if (data.title.includes("Ë™øÂ∏ÉËä±ÁÅ´")) {
        existingId = "chofu-hanabi-2025";
      } else if (data.title.includes("ÂåóÂå∫Ëä±ÁÅ´‰ºö")) {
        existingId = "kita-hanabi-11";
      } else if (data.title.includes("‰∏ñÁî∞Ë∞∑Âå∫„Åü„Åæ„Åå„ÇèËä±ÁÅ´Â§ß‰ºö")) {
        existingId = "setagaya-tamagawa-47";
      } else if (data.title.includes("ÂÖ´ÁéãÂ≠êËä±ÁÅ´Â§ß‰ºö")) {
        existingId = "hachioji-hanabi";
      } else if (data.title.includes("Á´ãÂ∑ù„Åæ„Å§„Çä")) {
        existingId = "tachikawa-showa";
      } else if (data.title.includes("Âæ°ËîµÂ≥∂Ëä±ÁÅ´Â§ß‰ºö")) {
        existingId = "mikurajima-hanabi";
      } else if (data.title.includes("Á•ûÊ¥•Â≥∂")) {
        existingId = "kozushima-hanabi";
      } else if (data.title.includes("Â••Â§öÊë©")) {
        existingId = "okutama-70th";
      } else if (data.title.includes("Êò≠Â≥∂Â∏ÇÊ∞ë")) {
        existingId = "akishima-kujira-53";
      } else if (data.title.includes("Â§öÊë©Â∑ùËä±ÁÅ´Â§ß‰ºö")) {
        existingId = "tamagawa-48";
      }

      mappings.push([data, existingId]);
    }

    return mappings;
  }

  updateEventData(content, eventId, walkerData) {
    // Êü•ÊâæÂØπÂ∫îÁöÑ‰∫ã‰ª∂ÂØπË±°
    const eventRegex = new RegExp(
      `{[^}]*id:\\s*["']${eventId}["'][^}]*}`,
      "gs"
    );
    const match = content.match(eventRegex);

    if (!match) {
      console.log(`‚ö†Ô∏è Êú™ÊâæÂà∞Ê¥ªÂä®ID: ${eventId}`);
      return content;
    }

    const eventObject = match[0];
    let updatedEvent = eventObject;

    // Êõ¥Êñ∞Êó•Êúü
    if (walkerData.date) {
      const cleanDate = this.cleanDate(walkerData.date);
      updatedEvent = updatedEvent.replace(
        /date:\s*["'][^"']*["']/,
        `date: "${cleanDate}"`
      );
    }

    // Êõ¥Êñ∞Âú∞ÁÇπ
    if (walkerData.location) {
      const cleanLocation = this.cleanLocation(walkerData.location);
      updatedEvent = updatedEvent.replace(
        /location:\s*["'][^"']*["']/,
        `location: "${cleanLocation}"`
      );
      // ÂêåÊó∂Êõ¥Êñ∞venueÂ≠óÊÆµ
      updatedEvent = updatedEvent.replace(
        /venue:\s*["'][^"']*["']/,
        `venue: "${cleanLocation}"`
      );
    }

    // Êõ¥Êñ∞ËßÇ‰ºóÊï∞
    if (walkerData.expectedVisitors) {
      const cleanVisitors = this.cleanVisitors(walkerData.expectedVisitors);
      updatedEvent = updatedEvent.replace(
        /expectedVisitors:\s*["'][^"']*["']/,
        `expectedVisitors: "${cleanVisitors}"`
      );
    }

    // Êõ¥Êñ∞Ëä±ÁÅ´Êï∞
    if (walkerData.fireworksCount) {
      const cleanFireworks = this.cleanFireworks(walkerData.fireworksCount);
      if (cleanFireworks) {
        updatedEvent = updatedEvent.replace(
          /fireworksCount:\s*\d+/,
          `fireworksCount: ${cleanFireworks}`
        );
      }
    }

    return content.replace(eventObject, updatedEvent);
  }

  cleanDate(dateStr) {
    // Ê∏ÖÁêÜÊó•ÊúüÊ†ºÂºè
    return dateStr
      .replace(/ÊúüÈñìÔºö/, "")
      .replace(/\([^)]*\)/g, "") // ÁßªÈô§Êã¨Âè∑ÂÜÖÂÆπ
      .trim();
  }

  cleanLocation(locationStr) {
    // Ê∏ÖÁêÜÂú∞ÁÇπÊ†ºÂºè
    return locationStr
      .replace(/Êù±‰∫¨ÈÉΩ„Éª[^/]*\//, "") // ÁßªÈô§"Êù±‰∫¨ÈÉΩ„ÉªÂå∫Âêç/"
      .trim();
  }

  cleanVisitors(visitorsStr) {
    // Ê∏ÖÁêÜËßÇ‰ºóÊï∞Ê†ºÂºè
    return visitorsStr.replace(/‰æãÂπ¥„ÅÆ‰∫∫Âá∫Ôºö/, "").trim();
  }

  cleanFireworks(fireworksStr) {
    // Ê∏ÖÁêÜËä±ÁÅ´Êï∞Ê†ºÂºèÔºåÊèêÂèñÊï∞Â≠ó
    const match = fireworksStr.match(/([0-9,]+)/);
    if (match) {
      return parseInt(match[1].replace(/,/g, ""));
    }
    return null;
  }

  async close() {
    if (this.browser) {
      await this.browser.close();
      console.log("üîí ÊµèËßàÂô®Â∑≤ÂÖ≥Èó≠");
    }
  }

  async run() {
    try {
      await this.init();
      const hanabiData = await this.scrapeHanabiData();

      if (hanabiData.length > 0) {
        const updateCount = await this.updatePageFile(hanabiData);

        // ‰øùÂ≠òÊäìÂèñÁöÑÂéüÂßãÊï∞ÊçÆÁî®‰∫éË∞ÉËØï
        await fs.writeFile(
          path.join(__dirname, "tokyo-hanabi-scraped-data.json"),
          JSON.stringify(hanabiData, null, 2),
          "utf8"
        );

        console.log("üìä ÊäìÂèñÊï∞ÊçÆÂ∑≤‰øùÂ≠òÂà∞: tokyo-hanabi-scraped-data.json");
        return updateCount;
      } else {
        console.log("‚ùå Ê≤°ÊúâÊäìÂèñÂà∞ÊúâÊïàÊï∞ÊçÆ");
        return 0;
      }
    } catch (error) {
      console.error("‚ùå Êõ¥Êñ∞ËøáÁ®ã‰∏≠Âá∫Áé∞ÈîôËØØ:", error);
      throw error;
    } finally {
      await this.close();
    }
  }
}

// Â¶ÇÊûúÁõ¥Êé•ËøêË°åÊ≠§ËÑöÊú¨
if (require.main === module) {
  const updater = new TokyoHanabiUpdater();
  updater
    .run()
    .then((updateCount) => {
      console.log(`\nüéâ Êõ¥Êñ∞ÂÆåÊàêÔºÅÂÖ±Êõ¥Êñ∞‰∫Ü ${updateCount} ‰∏™Ê¥ªÂä®`);
      process.exit(0);
    })
    .catch((error) => {
      console.error("\n‚ùå Êõ¥Êñ∞Â§±Ë¥•:", error);
      process.exit(1);
    });
}

module.exports = TokyoHanabiUpdater;
