# Playwright+Cheerio 地图坐标精确提取指南

## 📋 概述

本指南记录了使用Playwright+Cheerio技术从Jalan官方网站精确提取祭典活动地图坐标的成功方法。这是一个经过验证的技术流程，确保获取的坐标信息准确可靠，符合商业网站数据准确性要求。

## 🎯 技术背景

### 问题描述
- 商业网站的地图位置信息是最重要的信息之一
- 手动估算坐标可能导致位置偏差
- 需要从官方网站获取真实的Google Maps坐标

### 解决方案
使用Playwright浏览器自动化+Cheerio HTML解析技术，多方法提取页面中嵌入的真实地图坐标。

## 🛠️ 技术实现

### 核心技术栈
- **Playwright**: 浏览器自动化，模拟真实用户访问
- **Cheerio**: HTML解析，提取页面数据
- **Prisma**: 数据库操作，更新坐标信息

### 成功案例
**成田祇園祭坐标提取** (2025年6月)
- 目标网站: https://www.jalan.net/event/evt_343701/?screenId=OUW1702
- 提取结果: 35.786063, 140.318295
- 坐标来源: Google Maps链接
- 数据库记录: cmc70sil00001vl2cgins717l

## 📝 实施步骤

### 1. 环境配置
```javascript
const { chromium } = require('playwright');
const cheerio = require('cheerio');
const { PrismaClient } = require('../src/generated/prisma');

const prisma = new PrismaClient();
```

### 2. 浏览器设置
```javascript
const browser = await chromium.launch({ 
  headless: true, // 无头模式，更稳定
  args: [
    '--no-sandbox', 
    '--disable-setuid-sandbox', 
    '--disable-web-security', 
    '--disable-features=VizDisplayCompositor'
  ]
});
```

### 3. 页面访问优化
```javascript
// 设置用户代理避免反爬虫
await page.setExtraHTTPHeaders({
  'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
});

// 使用宽松的加载策略
await page.goto(targetUrl, {
  waitUntil: 'domcontentloaded', // 不等待所有资源
  timeout: 30000 // 适中的超时时间
});
```

### 4. 多方法坐标提取

#### 方法1: iframe地图分析
```javascript
const iframeCoords = await page.evaluate(() => {
  const iframes = Array.from(document.querySelectorAll('iframe'));
  for (const iframe of iframes) {
    const src = iframe.src;
    if (src && (src.includes('maps.google') || src.includes('google.com/maps'))) {
      // 提取各种坐标格式
      const coordsMatch = src.match(/[!@]([0-9.-]+),([0-9.-]+)/);
      const centerMatch = src.match(/center=([0-9.-]+),([0-9.-]+)/);
      // ... 更多格式匹配
    }
  }
});
```

#### 方法2: JavaScript变量搜索
```javascript
const jsCoords = await page.evaluate(() => {
  const scripts = Array.from(document.querySelectorAll('script'));
  for (const script of scripts) {
    const text = script.textContent || '';
    const patterns = [
      /lat[:\s]*([0-9.]+)[\s,]*lng[:\s]*([0-9.]+)/gi,
      /latitude[:\s]*([0-9.]+)[\s,]*longitude[:\s]*([0-9.]+)/gi,
      // ... 更多模式
    ];
    // 日本坐标范围验证: lat(30-40), lng(135-145)
  }
});
```

#### 方法3: 链接坐标提取 ⭐ (成功方法)
```javascript
const linkCoords = await page.evaluate(() => {
  const links = Array.from(document.querySelectorAll('a[href*="maps"], a[href*="google"]'));
  for (const link of links) {
    const href = link.href;
    const patterns = [
      /@([0-9.-]+),([0-9.-]+)/,
      /ll=([0-9.-]+),([0-9.-]+)/,
      /center=([0-9.-]+),([0-9.-]+)/,
      /q=([0-9.-]+),([0-9.-]+)/
    ];
    // 坐标范围验证确保准确性
  }
});
```

#### 方法4: Meta标签检查
```javascript
const metaCoords = await page.evaluate(() => {
  const geoPosition = document.querySelector('meta[name="geo.position"]');
  const icbm = document.querySelector('meta[name="ICBM"]');
  // 处理地理元数据
});
```

### 5. 坐标优先级选择
```javascript
// 优先级：iframe > javascript > link > meta
let finalCoords = null;
let coordsSource = '';

if (iframeCoords?.lat && iframeCoords?.lng) {
  finalCoords = { lat: iframeCoords.lat, lng: iframeCoords.lng };
  coordsSource = iframeCoords.source;
} else if (jsCoords?.lat && jsCoords?.lng) {
  finalCoords = { lat: jsCoords.lat, lng: jsCoords.lng };
  coordsSource = jsCoords.source;
} else if (linkCoords?.lat && linkCoords?.lng) { // ⭐ 成功路径
  finalCoords = { lat: linkCoords.lat, lng: linkCoords.lng };
  coordsSource = linkCoords.source;
} else if (metaCoords?.lat && metaCoords?.lng) {
  finalCoords = { lat: metaCoords.lat, lng: metaCoords.lng };
  coordsSource = metaCoords.source;
}
```

### 6. 数据库更新
```javascript
const embedUrl = `https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3240.0!2d${finalCoords.lng}!3d${finalCoords.lat}!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x0%3A0x0!2z5oiQ55Sw56WH5ZyS!5e0!3m2!1sja!2sjp!4v${Date.now()}!5m2!1sja!2sjp`;

const updatedData = {
  mapInfo: {
    address: '官方地址',
    coordinates: finalCoords,
    mapUrl: `https://maps.google.com/?q=${finalCoords.lat},${finalCoords.lng}`,
    embedUrl: embedUrl,
    coordsSource: coordsSource
  },
  verified: true,
  verificationDate: new Date()
};

await prisma.matsuriEvent.update({
  where: { id: eventId },
  data: updatedData
});
```

## ✅ 关键成功因素

### 1. 网络稳定性
- 使用无头模式避免UI干扰
- 设置合适的超时时间(30秒)
- 使用domcontentloaded等待策略

### 2. 反爬虫对策
- 设置真实浏览器User-Agent
- 使用适当的请求头
- 避免过于频繁的请求

### 3. 多方法保障
- 4种不同的坐标提取方法
- 按优先级选择最可靠的结果
- 坐标范围验证确保准确性

### 4. 数据验证
- 日本坐标范围检查: 纬度30-40，经度135-145
- 坐标来源记录便于追溯
- 数据库验证状态更新

## 🎯 实际应用结果

### 成田祇園祭案例
- **提取前坐标**: 35.7779, 140.3168 (估算值)
- **提取后坐标**: 35.786063, 140.318295 (官方真实值)
- **精度提升**: 约800米的位置偏差修正
- **数据来源**: Google Maps官方链接
- **验证状态**: 已验证，符合商业标准

## 📋 最佳实践

### 1. 合规性要求
- ✅ 必须使用官方网站数据
- ✅ 禁止编造任何坐标信息
- ✅ 记录数据来源便于追溯
- ✅ 验证坐标准确性

### 2. 技术规范
- ✅ 使用Playwright+Cheerio技术栈
- ✅ 多方法提取确保成功率
- ✅ 坐标范围验证防止错误
- ✅ 异常处理和降级方案

### 3. 维护要求
- ✅ 定期检查网站结构变化
- ✅ 更新选择器和匹配模式
- ✅ 监控提取成功率
- ✅ 备份原始数据

## 🚨 注意事项

### 网站变化应对
- Jalan网站可能更新页面结构
- 需要定期维护选择器
- 保持多种提取方法的灵活性

### 坐标验证
- 必须进行日本坐标范围检查
- 对比多个来源确保准确性
- 记录坐标来源便于问题排查

### 性能优化
- 使用无头模式提高稳定性
- 合理设置超时时间
- 避免不必要的资源加载

## 📞 技术支持

如需技术支持或遇到问题，请参考以下资源：
- Playwright官方文档
- Cheerio解析指南
- Prisma数据库操作手册

## 🔄 版本历史

- **v1.0** (2025年6月22日): 初始版本，成功提取成田祇園祭坐标
- 基于实际成功案例编写
- 验证了从Google Maps链接提取坐标的可靠性

## 📋 实际实施案例更新

### 河口湖ハーブフェスティバル地图实现 (2025年6月22日)

#### 背景
在实际实施河口湖薰衣草节页面时，发现了一种更直接有效的地图实现方法。

#### 实际采用方案
**直接使用官方验证坐标方案**：
- **数据来源**: Jalan官方网站 (https://www.jalan.net/event/evt_342198/)
- **坐标提取**: 35.523073, 138.745577 (河口湖大石公园)
- **实现方式**: 直接在模板中使用Google Maps Embed URL

#### 技术实现
```jsx
<iframe
  src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3240.0!2d138.745577!3d35.523073!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x0%3A0x0!2z5rKz5Y-j5rmW44OP44O844OW44OV44Kn44K544OG44Kj44OQ44Or!5e0!3m2!1sja!2sjp!4v1734866147716!5m2!1sja!2sjp"
  width="100%"
  height="100%"
  style={{ border: 0 }}
  allowFullScreen
  loading="lazy"
  referrerPolicy="no-referrer-when-downgrade"
  title="河口湖薰衣草节位置地图"
  className="rounded-2xl"
></iframe>
```

#### 优势分析
**相比复杂提取方案的优势**：
1. **立即可用**: 无需等待数据库更新，页面立即显示地图
2. **稳定可靠**: 不依赖网络请求和提取脚本的成功率
3. **用户体验**: 用户访问页面立即看到准确的地图位置
4. **维护简单**: 减少了复杂的脚本维护工作

#### 适用场景
**推荐使用直接坐标方案的情况**：
- ✅ 官方网站已明确提供地址信息
- ✅ 需要快速上线页面功能
- ✅ 坐标信息相对稳定不变
- ✅ 用户体验优先于技术复杂度

**推荐使用自动提取方案的情况**：
- ✅ 需要批量处理大量活动
- ✅ 坐标信息经常变动
- ✅ 需要完全自动化的数据流程
- ✅ 数据来源结构化程度高

#### 混合实施策略
**建议的最佳实践**：
1. **快速实现**: 先使用直接坐标方案快速上线
2. **后期优化**: 有时间时实施自动提取方案
3. **数据验证**: 定期验证坐标准确性
4. **灵活切换**: 保持两种方案的接口兼容性

#### 更新的实施流程
```mermaid
graph TD
    A[获取官方地址] --> B{坐标信息明确?}
    B -->|是| C[直接使用坐标方案]
    B -->|否| D[使用Playwright提取方案]
    C --> E[快速上线]
    D --> F[脚本提取坐标]
    F --> G[数据库更新]
    G --> E
    E --> H[定期验证准确性]
```

#### 经验总结
**实际项目中的关键发现**：
- 🎯 **用户优先**: 用户体验比技术复杂度更重要
- 🎯 **渐进实施**: 可以先简单实现，后续优化
- 🎯 **数据准确**: 无论哪种方案，数据准确性是第一位
- 🎯 **维护成本**: 简单方案的维护成本更低

---

**重要提醒**: 根据实际项目需求选择合适的实施方案。简单有效的方案往往比复杂的技术方案更适合商业项目的快速迭代需求。 