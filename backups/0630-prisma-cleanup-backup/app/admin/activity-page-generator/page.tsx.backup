/**
 * 活动页面生成器（六大类型）
 * @description 基于6个DetailTemplate，输入数据库ID，一键生成详情页面
 * 支持：祭典、花见、花火、红叶、灯光、文化艺术
 */
'use client';

import { useState, useRef, useEffect } from 'react';
import ImageSearchWidget from '../../../src/components/shared/ImageSearchWidget';

type ActivityType = 'matsuri' | 'hanami' | 'hanabi' | 'momiji' | 'illumination' | 'culture';

// 可选记录的类型定义
interface SelectableRecord {
  id: string;
  name: string;
}

// 活动类型配置
const ACTIVITY_CONFIGS = {
  matsuri: {
    name: '传统祭典',
    emoji: '🏮',
    template: 'MatsuriDetailTemplate',
    table: 'MatsuriEvent',
    colors: 'from-orange-500 to-red-500',
    hoverColors: 'from-orange-700 to-red-700'
  },
  hanami: {
    name: '花见会',
    emoji: '🌸',
    template: 'HanamiDetailTemplate', 
    table: 'HanamiEvent',
    colors: 'from-pink-500 to-rose-500',
    hoverColors: 'from-pink-700 to-rose-700'
  },
  hanabi: {
    name: '花火会',
    emoji: '🎆',
    template: 'HanabiDetailTemplate',
    table: 'HanabiEvent', 
    colors: 'from-blue-500 to-purple-500',
    hoverColors: 'from-blue-700 to-purple-700'
  },
  momiji: {
    name: '红叶狩',
    emoji: '🍁',
    template: 'MomijiDetailTemplate',
    table: 'MomijiEvent',
    colors: 'from-yellow-500 to-orange-500',
    hoverColors: 'from-yellow-700 to-orange-700'
  },
  illumination: {
    name: '灯光秀',
    emoji: '✨',
    template: 'IlluminationDetailTemplate',
    table: 'IlluminationEvent',
    colors: 'from-indigo-500 to-purple-500',
    hoverColors: 'from-indigo-700 to-purple-700'
  },
  culture: {
    name: '文艺术',
    emoji: '🎭',
    template: 'CultureArtDetailTemplate',
    table: 'CultureEvent',
    colors: 'from-green-500 to-teal-500',
    hoverColors: 'from-green-700 to-teal-700'
  }
};

// 图片压缩函数 - 统一16:9比例 (1200x675)
const compressImage = (file: File, maxWidth: number = 1200, maxHeight: number = 675, quality: number = 0.9): Promise<string> => {
  return new Promise((resolve, reject) => {
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    const img = new Image();
    
    img.onload = () => {
      // 计算压缩后的尺寸
      let { width, height } = img;
      
      // 按比例缩放
      if (width > height) {
        if (width > maxWidth) {
          height = (height * maxWidth) / width;
          width = maxWidth;
        }
      } else {
        if (height > maxHeight) {
          width = (width * maxHeight) / height;
          height = maxHeight;
        }
      }
      
      // 设置canvas尺寸
      canvas.width = width;
      canvas.height = height;
      
      // 启用图像平滑以提高质量
      if (ctx) {
        ctx.imageSmoothingEnabled = true;
        ctx.imageSmoothingQuality = 'high';
        
        // 绘制压缩后的图片
        ctx.drawImage(img, 0, 0, width, height);
        
                 // 智能选择输出格式和质量
         let compressedDataUrl: string;
         let bestQuality = quality;
         
         // 如果图片尺寸没有改变（即原图尺寸小于限制），则可能不需要压缩
         const dimensionChanged = (img.width !== width || img.height !== height);
         
         if (file.type === 'image/png') {
           // PNG格式处理
                       if (dimensionChanged) {
              // 尺寸改变了，先尝试PNG，再尝试JPEG
              const pngDataUrl = canvas.toDataURL('image/png');
              const jpegDataUrl = canvas.toDataURL('image/jpeg', quality);
              
              // 选择文件更小的格式，但不要过度压缩
              if (pngDataUrl.length < jpegDataUrl.length * 1.2) {
                compressedDataUrl = pngDataUrl;
              } else {
                compressedDataUrl = jpegDataUrl;
              }
            } else {
              // 尺寸没变，轻度压缩
              let currentQuality = 0.95;
              let bestSize = file.size * 0.8; // 目标是原文件的80%
              compressedDataUrl = canvas.toDataURL('image/png');
              
              // 尝试JPEG压缩，但保持较高质量
              while (currentQuality >= 0.7) {
                const jpegDataUrl = canvas.toDataURL('image/jpeg', currentQuality);
                const jpegSize = getCompressedSize(jpegDataUrl);
                
                if (jpegSize < bestSize && jpegSize < getCompressedSize(compressedDataUrl)) {
                  compressedDataUrl = jpegDataUrl;
                  bestQuality = currentQuality;
                  break;
                }
                currentQuality -= 0.05;
              }
            }
         } else {
           // 其他格式（主要是JPEG）
           compressedDataUrl = canvas.toDataURL('image/jpeg', quality);
           
           // 如果压缩后文件变大了，尝试更高质量
           const originalSizeEstimate = file.size;
           let compressedSizeEstimate = getCompressedSize(compressedDataUrl);
           
                       if (compressedSizeEstimate > originalSizeEstimate) {
              // 压缩变大了，适度降低质量
              let currentQuality = quality - 0.05;
              while (compressedSizeEstimate > originalSizeEstimate * 0.9 && currentQuality > 0.6) {
                compressedDataUrl = canvas.toDataURL('image/jpeg', currentQuality);
                compressedSizeEstimate = getCompressedSize(compressedDataUrl);
                currentQuality -= 0.05;
                bestQuality = currentQuality + 0.05;
              }
            }
         }
        
        resolve(compressedDataUrl);
      } else {
        reject(new Error('Canvas context 获取失败'));
      }
    };
    
    img.onerror = () => {
      reject(new Error('图片加载失败'));
    };
    
    // 读取原始图片
    const reader = new FileReader();
    reader.onload = (e) => {
      img.src = e.target?.result as string;
    };
    reader.onerror = () => {
      reject(new Error('文件读取失败'));
    };
    reader.readAsDataURL(file);
  });
};

// 获取压缩后的文件大小（估算）
const getCompressedSize = (dataUrl: string): number => {
  // Base64编码大约比原始数据大33%，去掉data:image/...;base64,前缀
  const base64Data = dataUrl.split(',')[1];
  return Math.round((base64Data.length * 3) / 4);
};

export default function ActivityPageGeneratorPage() {
  const [activityType, setActivityType] = useState<ActivityType>('matsuri');
  const [databaseId, setDatabaseId] = useState('');
  const [availableRecords, setAvailableRecords] = useState<SelectableRecord[]>([]);
  const [loadingRecords, setLoadingRecords] = useState(false);
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState<any>(null);
  const [inputMode, setInputMode] = useState<'select' | 'manual'>('select'); // 新增：输入模式切换
  const [uploadedImages, setUploadedImages] = useState<string[]>([]);
  const [uploading, setUploading] = useState(false);
  const [previewData, setPreviewData] = useState<any>(null);
  const [forceOverwrite, setForceOverwrite] = useState(true);
  const [compressionStats, setCompressionStats] = useState<{originalSize: number, compressedSize: number, count: number}>({
    originalSize: 0,
    compressedSize: 0,
    count: 0
  });
  const [generationProgress, setGenerationProgress] = useState<string>('');
  const [imageSourceMode, setImageSourceMode] = useState<'upload' | 'search'>('upload'); // 图片获取方式
  const fileInputRef = useRef<HTMLInputElement>(null);

  const currentConfig = ACTIVITY_CONFIGS[activityType];

  // 获取可用的记录列表（detailLink为null的记录）
  const fetchAvailableRecords = async (type: ActivityType) => {
    setLoadingRecords(true);
    try {
      const response = await fetch(`/api/get-null-detaillink-records?type=${type}`);
      const data = await response.json();
      
      if (data.success) {
        setAvailableRecords(data.records || []);
      } else {
        console.error('获取记录失败:', data.error);
        setAvailableRecords([]);
      }
    } catch (error) {
      console.error('获取记录失败:', error);
      setAvailableRecords([]);
    } finally {
      setLoadingRecords(false);
    }
  };

  // 当活动类型改变时，重新获取可用记录
  useEffect(() => {
    fetchAvailableRecords(activityType);
  }, [activityType]);

  // 预览数据库数据
  const handlePreviewData = async () => {
    if (!databaseId.trim()) {
      alert('请输入数据库记录ID');
      return;
    }

    setLoading(true);
    try {
      const response = await fetch(`/api/activity-data-preview?id=${databaseId}&type=${activityType}`);
      const data = await response.json();

      if (data.success) {
        setPreviewData(data.data);
      } else {
        alert(data.message || '数据预览失败');
        setPreviewData(null);
      }
    } catch (error) {
      console.error('预览数据失败:', error);
      alert('网络错误，请重试');
      setPreviewData(null);
    } finally {
      setLoading(false);
    }
  };

  // 处理图片上传（带压缩）
  const handleImageUpload = async (files: FileList) => {
    console.log('handleImageUpload 被调用，文件数量:', files ? files.length : 0);
    
    if (!files || files.length === 0) {
      console.log('没有选择文件');
      return;
    }

    setUploading(true);
    const newImages: string[] = [];
    let totalOriginalSize = 0;
    let totalCompressedSize = 0;
    let processedCount = 0;

    try {
      for (let i = 0; i < files.length; i++) {
        const file = files[i];
        console.log(`处理文件 ${i + 1}:`, file.name, file.type, file.size);
        
        // 检查文件类型
        if (!file.type.startsWith('image/')) {
          alert(`文件 ${file.name} 不是图片格式`);
          continue;
        }

        // 记录原始文件大小
        const originalSize = file.size;
        totalOriginalSize += originalSize;

        try {
          // 🖼️ 统一图片处理流程：压缩 → 上传到服务器 → 获取标准路径
          console.log(`开始压缩 ${file.name}...`);
          const compressedDataUrl = await compressImage(file, 1200, 675, 0.9); // 统一16:9比例 (1200x675)
          
          // 计算压缩后大小
          const compressedSize = getCompressedSize(compressedDataUrl);
          totalCompressedSize += compressedSize;
          
          console.log(`${file.name} 压缩完成:`, {
            原始大小: `${(originalSize / 1024 / 1024).toFixed(2)}MB`,
            压缩后大小: `${(compressedSize / 1024 / 1024).toFixed(2)}MB`,
            压缩率: `${((1 - compressedSize / originalSize) * 100).toFixed(1)}%`
          });

          // 🚀 上传到服务器，获取标准路径格式
          console.log(`开始上传 ${file.name} 到服务器...`);
          const uploadResponse = await fetch('/api/upload-images', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              images: [compressedDataUrl],
              targetDir: 'general' // 使用通用目录
            })
          });

          if (!uploadResponse.ok) {
            throw new Error(`上传失败: ${uploadResponse.statusText}`);
          }

          const uploadResult = await uploadResponse.json();
          if (uploadResult.success && uploadResult.uploadedFiles && uploadResult.uploadedFiles.length > 0) {
            const serverPath = uploadResult.uploadedFiles[0]; // 获取服务器返回的路径
            console.log(`${file.name} 上传成功，服务器路径:`, serverPath);
            newImages.push(serverPath);
            processedCount++;
          } else {
            throw new Error('上传响应格式错误');
          }
          
        } catch (compressionError) {
          console.error(`处理 ${file.name} 失败:`, compressionError);
          const errorMessage = compressionError instanceof Error ? compressionError.message : '未知错误';
          alert(`处理 ${file.name} 失败: ${errorMessage}`);
        }
      }

      if (newImages.length > 0) {
        setUploadedImages(prev => [...prev, ...newImages]);
        
        // 更新压缩统计
        setCompressionStats(prev => ({
          originalSize: prev.originalSize + totalOriginalSize,
          compressedSize: prev.compressedSize + totalCompressedSize,
          count: prev.count + processedCount
        }));
        
        const compressionRatio = ((1 - totalCompressedSize / totalOriginalSize) * 100).toFixed(1);
        alert(`成功处理 ${processedCount} 张图片\n压缩率: ${compressionRatio}%\n原始大小: ${(totalOriginalSize / 1024 / 1024).toFixed(2)}MB\n压缩后: ${(totalCompressedSize / 1024 / 1024).toFixed(2)}MB\n图片已上传到服务器`);
      }
      
    } catch (error) {
      console.error('图片处理失败:', error);
      alert('图片处理失败，请重试');
    } finally {
      setUploading(false);
    }
  };

  // 删除图片
  const removeImage = (index: number) => {
    setUploadedImages(prev => prev.filter((_, i) => i !== index));
  };

  // 清空所有图片
  const clearAllImages = () => {
    setUploadedImages([]);
    setCompressionStats({
      originalSize: 0,
      compressedSize: 0,
      count: 0
    });
  };

  // 处理搜索图片选择
  const handleSearchImageSelect = async (imageUrl: string) => {
    setUploading(true);
    try {
      // 下载搜索到的图片并转换为base64
      const response = await fetch(imageUrl);
      const blob = await response.blob();
      
      // 将blob转换为File对象
      const file = new File([blob], 'searched-image.jpg', { type: blob.type });
      
      // 使用现有的图片处理流程
      const compressedDataUrl = await compressImage(file, 1200, 675, 0.9);
      
      // 上传到服务器
      const uploadResponse = await fetch('/api/upload-images', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          images: [compressedDataUrl],
          targetDir: 'general'
        })
      });

      if (uploadResponse.ok) {
        const uploadResult = await uploadResponse.json();
        if (uploadResult.success && uploadResult.uploadedFiles?.length > 0) {
          const serverPath = uploadResult.uploadedFiles[0];
          setUploadedImages(prev => [...prev, serverPath]);
          
          // 更新压缩统计
          const originalSize = file.size;
          const compressedSize = getCompressedSize(compressedDataUrl);
          setCompressionStats(prev => ({
            originalSize: prev.originalSize + originalSize,
            compressedSize: prev.compressedSize + compressedSize,
            count: prev.count + 1
          }));
        }
      }
    } catch (error) {
      console.error('处理搜索图片失败:', error);
      alert('添加图片失败，请重试');
    } finally {
      setUploading(false);
    }
  };

  // 处理批量搜索图片选择
  const handleSearchImagesSelect = async (images: any[]) => {
    for (const image of images) {
      await handleSearchImageSelect(image.url);
    }
  };

  const handleGenerate = async () => {
    if (!databaseId.trim()) {
      alert('请输入数据库记录ID');
      return;
    }

    // 防止页面跳转的额外保护
    if (window.onbeforeunload) {
      window.onbeforeunload = null;
    }

    setLoading(true);
    setResult(null);
    setGenerationProgress('🚀 开始生成页面...');

    try {
      console.log(`开始生成${currentConfig.name}页面，数据库ID:`, databaseId);
      console.log('已上传图片数量:', uploadedImages.length);
      console.log('强制覆盖模式:', forceOverwrite);
      
      setGenerationProgress('📡 正在发送请求到服务器...');
      
      const response = await fetch('/api/activity-page-generator', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          databaseId: databaseId.trim(),
          activityType: activityType,
          forceOverwrite: forceOverwrite,
          options: {
            uploadedImages: uploadedImages
          }
        })
      });

      setGenerationProgress('⚙️ 正在处理服务器响应...');
      const data = await response.json();
      console.log('生成结果:', data);

      // 如果是409冲突（页面已存在），显示特殊提示
      if (response.status === 409) {
        setResult({
          success: false,
          message: data.message || '页面已存在',
          warning: data.warning,
          data: data.data,
          isConflict: true
        });
      } else if (data.success) {
        setResult({
          success: true,
          message: `${currentConfig.name}页面生成成功！`,
          data: data.data
        });
        // 生成成功后保持智能覆盖模式
        // setForceOverwrite(false); // 保持默认启用状态
        
        // 防止页面自动跳转 - 阻止默认行为
        if (window.history && window.history.replaceState) {
          window.history.replaceState(null, '', window.location.href);
        }
      } else {
        setResult({
          success: false,
          message: data.message || '生成失败',
          error: data.error
        });
      }

    } catch (error) {
      console.error('生成失败:', error);
      setResult({
        success: false,
        message: '网络错误',
        error: error instanceof Error ? error.message : '未知错误'
      });
    } finally {
      setLoading(false);
      setGenerationProgress('');
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-50 p-8">
      <div className="max-w-6xl mx-auto">
        <div className="bg-white rounded-2xl shadow-xl p-8">
          <div className="text-center mb-8">
            <h1 className="text-4xl font-bold text-gray-800 mb-4">
              🎌 活动页面生成器
            </h1>
            <p className="text-lg text-gray-600">
              选择活动类型，自动筛选可用记录，一键生成详情页面
            </p>
            <p className="text-sm text-blue-600 mt-2">
              🔗 自动建立与三层卡片的连接，生成页面后"查看详情"按钮可直接跳转
            </p>
          </div>

          {/* 活动类型选择器 - 6个选项 */}
          <div className="mb-8">
            <div className="flex justify-center">
              <div className="bg-white rounded-xl p-3 shadow-lg border-2 border-gray-200">
                <div className="grid grid-cols-3 gap-2">
                  {Object.entries(ACTIVITY_CONFIGS).map(([key, config]) => (
                    <button
                      key={key}
                      onClick={() => {
                        setActivityType(key as ActivityType);
                        setDatabaseId(''); // 清空选择的ID
                        setPreviewData(null); // 清空预览数据
                        setResult(null); // 清空结果
                        setInputMode('select'); // 重置为选择模式
                      }}
                      className={`px-4 py-3 rounded-lg font-bold transition-all duration-300 text-sm ${
                        activityType === key
                          ? `bg-gradient-to-r ${config.colors} text-white shadow-lg`
                          : 'text-gray-600 hover:text-gray-800 hover:bg-gray-100'
                      }`}
                    >
                      {config.emoji} {config.name}
                    </button>
                  ))}
                </div>
              </div>
            </div>
          </div>

          {/* 数据库记录ID和预览区域 */}
          <div className="mb-8">
            <div className="space-y-6">
              <div>
                <label className="block text-lg font-semibold text-gray-700 mb-3">
                  🗄️ 数据库记录ID ({currentConfig.table})
                </label>
                
                {/* 输入模式切换按钮 */}
                <div className="mb-4 flex gap-2">
                  <button
                    onClick={() => {
                      setInputMode('select');
                      setDatabaseId('');
                    }}
                    className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                      inputMode === 'select'
                        ? 'bg-blue-500 text-white'
                        : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                    }`}
                  >
                    📋 选择模式
                  </button>
                  <button
                    onClick={() => {
                      setInputMode('manual');
                      setDatabaseId('');
                    }}
                    className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                      inputMode === 'manual'
                        ? 'bg-green-500 text-white'
                        : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                    }`}
                  >
                    ✏️ 手动输入
                  </button>
                </div>

                <div className="flex gap-3">
                  <div className="flex-1 relative">
                    {inputMode === 'select' ? (
                      <>
                        <select
                          value={databaseId}
                          onChange={(e) => setDatabaseId(e.target.value)}
                          disabled={loadingRecords}
                          className="w-full px-4 py-3 border-2 border-gray-300 rounded-lg text-lg focus:border-blue-500 focus:outline-none transition-colors bg-white appearance-none"
                        >
                          <option value="">
                            {loadingRecords 
                              ? '⏳ 正在加载可选记录...' 
                              : availableRecords.length === 0 
                                ? '❌ 暂无可用记录（detailLink为空）'
                                : `请选择${currentConfig.name}记录`
                            }
                          </option>
                          {availableRecords.map((record) => (
                            <option key={record.id} value={record.id}>
                              {record.id} - {record.name}
                            </option>
                          ))}
                        </select>
                        {/* 下拉箭头 */}
                        <div className="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
                          <svg className="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                          </svg>
                        </div>
                      </>
                    ) : (
                      <input
                        type="text"
                        value={databaseId}
                        onChange={(e) => setDatabaseId(e.target.value)}
                        placeholder={`请输入${currentConfig.name}记录ID，例如：cmc7o1zkp000kvl0s3j9rjimj`}
                        className="w-full px-4 py-3 border-2 border-gray-300 rounded-lg text-lg focus:border-green-500 focus:outline-none transition-colors"
                      />
                    )}
                  </div>
                  <button
                    onClick={handlePreviewData}
                    disabled={loading || !databaseId}
                    className="px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:bg-gray-400 transition-colors"
                  >
                    {loading ? '⏳' : '👁️ 预览'}
                  </button>
                </div>
                
                {/* 可用记录统计 - 只在选择模式下显示 */}
                {inputMode === 'select' && !loadingRecords && (
                  <div className="mt-2 text-sm text-gray-600">
                    📊 当前{currentConfig.name}活动中，有 <span className="font-semibold text-blue-600">{availableRecords.length}</span> 个记录的detailLink为空，可用于生成页面
                  </div>
                )}
                
                {/* 手动输入模式的提示 */}
                {inputMode === 'manual' && (
                  <div className="mt-2 text-sm text-green-600">
                    ✏️ 手动输入模式：可以输入任意数据库记录ID，包括已有detailLink的记录
                  </div>
                )}
              </div>

              {/* 十项数据预览 */}
              {previewData && (
                <div className="bg-gray-50 rounded-lg p-6 border-2 border-gray-200">
                  <h3 className="text-lg font-bold text-gray-800 mb-4">
                    📋 十项数据预览 ({currentConfig.template})
                  </h3>
                  <div className="space-y-3 text-sm">
                    <div className="grid grid-cols-1 gap-2">
                      <div><strong>1. 名称:</strong> <span className="text-blue-600">{previewData.name || '❌ 未设置'}</span></div>
                      <div><strong>2. 所在地:</strong> <span className="text-blue-600">{previewData.address || '❌ 未设置'}</span></div>
                      <div><strong>3. 开催期间:</strong> <span className="text-blue-600">{previewData.datetime || '❌ 未设置'}</span></div>
                      <div><strong>4. 开催场所:</strong> <span className="text-blue-600">{previewData.venue || '❌ 未设置'}</span></div>
                      <div><strong>5. 交通方式:</strong> <span className="text-blue-600">{previewData.access || '❌ 未设置'}</span></div>
                      <div><strong>6. 主办方:</strong> <span className="text-blue-600">{previewData.organizer || '❌ 未设置'}</span></div>
                      <div><strong>7. 料金:</strong> <span className="text-blue-600">{previewData.price || '❌ 未设置'}</span></div>
                      <div><strong>8. 联系方式:</strong> <span className="text-blue-600">{previewData.contact || '❌ 未设置'}</span></div>
                      <div><strong>9. 官方网站:</strong> <span className="text-blue-600">{previewData.website || '❌ 未设置'}</span></div>
                      <div><strong>10. 谷歌地图:</strong> <span className="text-blue-600">{previewData.googleMap || '❌ 未设置'}</span></div>
                    </div>
                    
                    {/* 数据完整度统计 */}
                    <div className="mt-4 p-3 bg-white rounded border">
                      {(() => {
                        const fields = ['name', 'address', 'datetime', 'venue', 'access', 'organizer', 'price', 'contact', 'website', 'googleMap'];
                        const filledFields = fields.filter(field => previewData[field]);
                        const completeness = Math.round((filledFields.length / fields.length) * 100);
                        return (
                          <div className="text-center">
                            <div className={`text-lg font-bold ${completeness === 100 ? 'text-green-600' : completeness >= 80 ? 'text-yellow-600' : 'text-red-600'}`}>
                              📊 数据完整度: {completeness}% ({filledFields.length}/10)
                            </div>
                            {completeness < 100 && (
                              <div className="text-xs text-red-500 mt-1">
                                ⚠️ 数据不完整，生成的页面可能缺少部分信息
                              </div>
                            )}
                          </div>
                        );
                      })()}
                    </div>
                  </div>
                </div>
              )}

            </div>
          </div>

          {/* 图片获取区域 - 全宽 */}
          <div className="mb-8">
            <div>
              <label className="block text-lg font-semibold text-gray-700 mb-3">
                {currentConfig.emoji} {currentConfig.name}图片获取
              </label>
              
              {/* 图片获取方式切换 */}
              <div className="mb-4 flex gap-2">
                <button
                  onClick={() => setImageSourceMode('upload')}
                  className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                    imageSourceMode === 'upload'
                      ? 'bg-blue-500 text-white'
                      : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                  }`}
                >
                  📁 本地上传
                </button>
                <button
                  onClick={() => setImageSourceMode('search')}
                  className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                    imageSourceMode === 'search'
                      ? 'bg-green-500 text-white'
                      : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                  }`}
                >
                  🔍 智能搜索
                </button>
              </div>
              
              {/* 图片获取内容区域 */}
              {imageSourceMode === 'upload' ? (
                // 图片上传区域
                <div
                  onClick={() => fileInputRef.current?.click()}
                  onDragOver={(e) => {
                    e.preventDefault();
                    e.stopPropagation();
                  }}
                  onDrop={(e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    const files = e.dataTransfer.files;
                    if (files.length > 0) {
                      handleImageUpload(files);
                    }
                  }}
                  className={`border-2 border-dashed border-blue-300 rounded-lg p-8 text-center cursor-pointer transition-colors hover:border-blue-500 hover:bg-blue-50 ${
                    uploading ? 'bg-gray-100 cursor-not-allowed' : ''
                  }`}
                >
                <input
                  ref={fileInputRef}
                  type="file"
                  multiple
                  accept="image/*"
                  onChange={(e) => {
                    if (e.target.files) {
                      handleImageUpload(e.target.files);
                    }
                  }}
                  className="hidden"
                />
                
                <div className="space-y-2">
                  <div className="text-4xl">📷</div>
                  <div className="text-lg font-semibold text-gray-700">
                    {uploading ? '⏳ 正在上传...' : '点击或拖拽上传图片'}
                  </div>
                  <div className="text-sm text-gray-500">
                    支持 JPG、PNG、GIF 格式，自动压缩至1200*675 (16:9比例)
                  </div>
                  
                  {/* 压缩统计显示 */}
                  {compressionStats.count > 0 && (
                    <div className="mt-3 p-3 bg-green-50 border border-green-200 rounded-lg">
                      <div className="text-sm text-green-800">
                        <div className="font-semibold mb-1">📊 压缩统计</div>
                        <div className="grid grid-cols-2 gap-2 text-xs">
                          <div>已处理: {compressionStats.count} 张</div>
                          <div>压缩率: {compressionStats.originalSize > 0 ? ((1 - compressionStats.compressedSize / compressionStats.originalSize) * 100).toFixed(1) : 0}%</div>
                          <div>原始: {(compressionStats.originalSize / 1024 / 1024).toFixed(2)}MB</div>
                          <div>压缩后: {(compressionStats.compressedSize / 1024 / 1024).toFixed(2)}MB</div>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
                </div>
              ) : (
                // 图片搜索区域
                <div className="border-2 border-dashed border-green-300 rounded-lg p-6">
                  <ImageSearchWidget
                    activityName={previewData?.name || ''}
                    activityType={currentConfig.name}
                    region=""
                    onImageSelect={handleSearchImageSelect}
                    onImagesSelect={handleSearchImagesSelect}
                    maxResults={10}
                    allowMultiSelect={true}
                    autoSearch={false}
                    className="w-full"
                  />
                </div>
              )}

              {/* 已上传的图片预览 */}
              {uploadedImages.length > 0 && (
                <div className="mt-4">
                  <div className="flex justify-between items-center mb-3">
                    <span className="text-sm font-semibold text-gray-700">
                      已上传图片 ({uploadedImages.length})
                    </span>
                    <button
                      onClick={clearAllImages}
                      className="text-sm text-red-600 hover:text-red-800 font-medium"
                    >
                      清空全部
                    </button>
                  </div>
                  
                  <div className="grid grid-cols-6 gap-2 max-h-64 overflow-y-auto">
                    {uploadedImages.map((image, index) => (
                      <div key={index} className="relative group">
                        <img
                          src={image}
                          alt={`上传图片 ${index + 1}`}
                          className="w-full h-20 object-cover rounded-lg border-2 border-gray-200"
                        />
                        <button
                          onClick={() => removeImage(index)}
                          className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full w-6 h-6 text-xs opacity-0 group-hover:opacity-100 transition-opacity"
                        >
                          ×
                        </button>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>

          {/* 页面生成控制区域 - 全宽 */}
          <div className="mb-8">
            <div>
              <label className="block text-lg font-semibold text-gray-700 mb-3">
                🚀 页面生成控制
              </label>

              {/* 强制覆盖选项 - 默认启用 */}
              <div className="mb-4 p-4 bg-green-50 border border-green-200 rounded-lg">
                <label className="flex items-center space-x-3 cursor-pointer">
                  <input
                    type="checkbox"
                    checked={forceOverwrite}
                    onChange={(e) => setForceOverwrite(e.target.checked)}
                    className="w-5 h-5 text-green-600 bg-gray-100 border-gray-300 rounded focus:ring-green-500"
                  />
                  <div className="flex-1">
                    <div className="text-sm font-semibold text-green-800">
                      ✅ 智能覆盖模式（推荐）
                    </div>
                    <div className="text-xs text-green-700">
                      自动覆盖已存在页面，避免重复生成，保持项目整洁
                    </div>
                  </div>
                </label>
              </div>

              <button
                type="button"
                onClick={(e) => {
                  e.preventDefault();
                  e.stopPropagation();
                  handleGenerate();
                }}
                disabled={loading || !previewData}
                className={`w-full py-4 px-6 rounded-lg text-xl font-bold text-white transition-all ${
                  loading || !previewData
                    ? 'bg-gray-400 cursor-not-allowed' 
                    : `bg-gradient-to-r ${currentConfig.colors} hover:${currentConfig.hoverColors} hover:shadow-lg transform hover:-translate-y-1`
                }`}
              >
                {loading 
                  ? generationProgress || '⏳ 正在生成页面...' 
                  : !previewData
                    ? '🔍 请先预览数据'
                    : `🚀 生成${currentConfig.name}详情页面 ${forceOverwrite ? '(智能覆盖)' : '(仅新建)'}`
                }
              </button>
              
              {/* 生成进度显示 */}
              {loading && generationProgress && (
                <div className="mt-3 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                  <div className="text-sm text-blue-800 text-center">
                    {generationProgress}
                  </div>
                  <div className="mt-2 text-xs text-blue-600 text-center">
                    请耐心等待，生成过程可能需要几秒钟...
                  </div>
                </div>
              )}

              {/* 页面生成统计信息 */}
              {!loading && (
                <div className="mt-4 p-3 bg-gray-50 rounded-lg">
                  <div className="text-sm text-gray-600">
                    <div className="font-semibold mb-2">📊 生成统计</div>
                    <div className="space-y-1 text-xs">
                      <div>已上传图片: {uploadedImages.length} 张</div>
                      <div>数据完整度: {previewData ? (() => {
                        const fields = ['name', 'address', 'datetime', 'venue', 'access', 'organizer', 'price', 'contact', 'website', 'googleMap'];
                        const filledFields = fields.filter(field => previewData[field]);
                        return Math.round((filledFields.length / fields.length) * 100);
                      })() : 0}%</div>
                      <div>生成模式: {forceOverwrite ? '智能覆盖' : '仅新建'}</div>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>

          {/* 生成结果显示 */}
          {result && (
            <div className="mt-8 p-6 rounded-lg border-2" style={{
              backgroundColor: result.success ? '#f0fdf4' : '#fef2f2',
              borderColor: result.success ? '#22c55e' : '#ef4444'
            }}>
              <h3 className="text-lg font-bold mb-3" style={{
                color: result.success ? '#15803d' : '#dc2626'
              }}>
                {result.success ? '✅ 生成成功！' : '❌ 生成失败'}
              </h3>
              
              <p className="text-gray-700 mb-3">{result.message}</p>
              
              {result.success && result.data && (
                <div className="space-y-2 text-sm">
                  <div><strong>📁 文件路径:</strong> {result.data.filePath}</div>
                  <div><strong>🌐 访问链接:</strong> 
                    <a 
                      href={result.data.url} 
                      target="_blank" 
                      rel="noopener noreferrer"
                      className="ml-2 text-blue-600 hover:text-blue-800 underline"
                    >
                      {result.data.url}
                    </a>
                  </div>
                  {result.data.detailLink && (
                    <div><strong>🔗 详情链接:</strong> <code className="bg-gray-100 px-2 py-1 rounded text-xs">{result.data.detailLink}</code></div>
                  )}
                  <div><strong>{currentConfig.emoji} 模板类型:</strong> {currentConfig.template}</div>
                  <div><strong>📊 数据库ID:</strong> {result.data.databaseId}</div>
                  <div><strong>🗄️ 数据表:</strong> {currentConfig.table}</div>
                  <div><strong>🕐 生成时间:</strong> {new Date(result.data.generatedAt).toLocaleString()}</div>
                  
                  {/* 连接建立状态 */}
                  {result.data.connectionEstablished && (
                    <div className="mt-3 p-3 bg-green-100 border border-green-300 rounded">
                      <div className="text-green-800 font-semibold">{result.data.connectionEstablished}</div>
                      <div className="text-xs text-green-700 mt-1">
                        三层卡片的"查看详情"按钮现在可以直接跳转到此页面
                      </div>
                    </div>
                  )}
                  
                  {/* 四层页面结构显示 */}
                  {result.data.pageStructure && (
                    <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded">
                      <div className="font-semibold mb-2 text-blue-800">🏗️ 四层页面结构</div>
                      <div className="space-y-1 text-xs text-blue-700">
                        <div>{result.data.pageStructure.layer1}</div>
                        <div>{result.data.pageStructure.layer2}</div>
                        <div>{result.data.pageStructure.layer3}</div>
                        <div>{result.data.pageStructure.layer4}</div>
                      </div>
                    </div>
                  )}
                </div>
              )}
              
              {/* 页面冲突提示 */}
              {!result.success && result.isConflict && result.data && (
                <div className="mt-3 p-4 bg-orange-50 border border-orange-200 rounded">
                  <div className="text-orange-800 font-semibold mb-2">⚠️ 页面已存在</div>
                  <div className="text-sm text-orange-700 space-y-1">
                    <div><strong>现有页面:</strong> {result.data.url}</div>
                    <div><strong>活动名称:</strong> {result.data.activityName}</div>
                    <div><strong>建议:</strong> {result.data.suggestion}</div>
                  </div>
                  <button
                    onClick={() => {
                      setForceOverwrite(true);
                      setResult(null);
                    }}
                    className="mt-3 px-4 py-2 bg-orange-500 text-white rounded hover:bg-orange-600 text-sm"
                  >
                    🔄 启用强制覆盖模式
                  </button>
                </div>
              )}
              
              {!result.success && result.error && (
                <div className="mt-3 p-3 bg-red-50 border border-red-200 rounded text-sm text-red-700">
                  <strong>错误详情:</strong> {result.error}
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
} 