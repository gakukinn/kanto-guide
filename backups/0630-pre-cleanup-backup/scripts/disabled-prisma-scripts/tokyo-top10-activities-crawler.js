import { PrismaClient } from '../src/generated/prisma/index.js';
import { chromium } from 'playwright';

const prisma = new PrismaClient();

/**
 * ‰∏ú‰∫¨Ââç10‰∏™Ê¥ªÂä®‰∏ìÁî®Áà¨Ëô´
 * ÁõÆÊ†áÔºöËé∑ÂèñÂÖ≠Â§ßÁ±ªÊ¥ªÂä®ÔºàÁ•≠ÂÖ∏„ÄÅËä±ÁÅ´„ÄÅËä±ËßÅ„ÄÅÁ∫¢Âè∂„ÄÅÁÅØÂÖâ„ÄÅÊñáËâ∫ÔºâÁöÑÂâç10‰∏™Ê¥ªÂä®
 * ÊØè‰∏™Ê¥ªÂä®Ëé∑Âèñ11È°πÂÆåÊï¥‰ø°ÊÅØ
 */

class TokyoTop10ActivitiesCrawler {
    constructor() {
        this.browser = null;
        this.page = null;
        this.foundActivities = [];
        this.targetCount = 10; // ÁõÆÊ†áÔºöÂâç10‰∏™Ê¥ªÂä®
        
        // ÂÖ≠Â§ßÁ±ªÊ¥ªÂä®ÂÖ≥ÈîÆËØç
        this.activityTypes = {
            'matsuri': ['Á•≠', 'festival', 'Á•≠ÂÖ∏', 'Á•≠ÂÖ∏'],
            'hanabi': ['Ëä±ÁÅ´', 'fireworks', 'Ëä±ÁÅ´Â§ß‰ºö'],
            'hanami': ['Ê°ú', 'cherry', 'Ëä±Ë¶ã', '„Åï„Åè„Çâ', 'Ê¢Ö'],
            'momiji': ['Á¥ÖËëâ', 'autumn', '„ÇÇ„Åø„Åò', 'Á¥ÖËëâÁã©„Çä'],
            'illumination': ['„Ç§„É´„Éü„Éç„Éº„Ç∑„Éß„É≥', 'illumination', '„É©„Ç§„Éà„Ç¢„ÉÉ„Éó'],
            'culture': ['ÊñáÂåñ', 'culture', '„Ç¢„Éº„Éà', 'art', 'Â±ïË¶ß‰ºö', 'Èü≥Ê•Ω']
        };
    }

    async start() {
        console.log('üéØ ÂºÄÂßãÁà¨Âèñ‰∏ú‰∫¨Ââç10‰∏™ÂÖ≠Â§ßÁ±ªÊ¥ªÂä®...');
        
        try {
            await this.initBrowser();
            await this.crawlActivities();
            await this.saveActivities();
            
            console.log(`\nüéâ ‰ªªÂä°ÂÆåÊàêÔºÅÊàêÂäüÁà¨Âèñ ${this.foundActivities.length} ‰∏™Ê¥ªÂä®`);
            
        } catch (error) {
            console.error('‚ùå Áà¨ÂèñÂ§±Ë¥•:', error.message);
        } finally {
            await this.cleanup();
        }
    }

    async initBrowser() {
        console.log('üöÄ ÂêØÂä®ÊµèËßàÂô®...');
        this.browser = await chromium.launch({ 
            headless: false, // ÂèØËßÜÂåñÊìç‰ΩúÔºåÊñπ‰æøË∞ÉËØï
            slowMo: 1000 
        });
        this.page = await this.browser.newPage();
        
        // ËÆæÁΩÆÂêàÁêÜÁöÑË∂ÖÊó∂Êó∂Èó¥
        this.page.setDefaultTimeout(30000);
    }

    async crawlActivities() {
        // ÊñπÊ°à1ÔºöÁõ¥Êé•‰ªéÊ¥ªÂä®ÂàóË°®È°µÈù¢ÂºÄÂßã
        const listUrls = [
            'https://www.jalan.net/event/130000/?screenId=OUW1025', // Áî®Êà∑Êèê‰æõÁöÑ‰∏ú‰∫¨URL
            'https://www.jalan.net/event/130000/', // Â§áÁî®URL
        ];

        for (const listUrl of listUrls) {
            console.log(`\nüìã Â∞ùËØïËÆøÈóÆÊ¥ªÂä®ÂàóË°®: ${listUrl}`);
            
            try {
                await this.page.goto(listUrl, { waitUntil: 'domcontentloaded' });
                await this.page.waitForTimeout(3000);
                
                const title = await this.page.title();
                console.log(`üìÑ È°µÈù¢Ê†áÈ¢ò: ${title}`);
                
                // Â¶ÇÊûúÊàêÂäüÂä†ËΩΩÔºåÂºÄÂßãÊèêÂèñÊ¥ªÂä®
                await this.extractActivitiesFromList();
                
                // Â¶ÇÊûúÂ∑≤ÁªèÊâæÂà∞Ë∂≥Â§üÁöÑÊ¥ªÂä®ÔºåÂÅúÊ≠¢
                if (this.foundActivities.length >= this.targetCount) {
                    console.log(`‚úÖ Â∑≤ÊâæÂà∞ ${this.foundActivities.length} ‰∏™Ê¥ªÂä®Ôºå‰ªªÂä°ÂÆåÊàê`);
                    break;
                }
                
            } catch (error) {
                console.error(`‚ùå ËÆøÈóÆ ${listUrl} Â§±Ë¥•:`, error.message);
                continue;
            }
        }

        // ÊñπÊ°à2ÔºöÂ¶ÇÊûúÂàóË°®È°µÈù¢Êó†Ê≥ïËÆøÈóÆÔºå‰ΩøÁî®Â∑≤Áü•ÁöÑÊ¥ªÂä®URL
        if (this.foundActivities.length === 0) {
            console.log('\nüîÑ ÂàóË°®È°µÈù¢Êó†Ê≥ïËÆøÈóÆÔºå‰ΩøÁî®Â§áÁî®ÊñπÊ°à...');
            await this.useBackupActivityUrls();
        }
    }

    async extractActivitiesFromList() {
        console.log('üîç Ê≠£Âú®‰ªéÂàóË°®È°µÈù¢ÊèêÂèñÊ¥ªÂä®ÈìæÊé•...');
        
        try {
            // Á≠âÂæÖÈ°µÈù¢ÂÜÖÂÆπÂä†ËΩΩ
            await this.page.waitForTimeout(5000);
            
            // Â∞ùËØïÂ§öÁßçÂèØËÉΩÁöÑÊ¥ªÂä®ÈìæÊé•ÈÄâÊã©Âô®
            const linkSelectors = [
                'a[href*="/event/"]',
                'a[href*="event"]',
                'a[href*="evt"]',
                'a',
            ];

            let activityLinks = [];
            
            for (const selector of linkSelectors) {
                try {
                    const links = await this.page.$$eval(selector, elements =>
                        elements
                            .filter(el => el.href && (
                                el.href.includes('/event/') || 
                                el.href.includes('jalan.net')
                            ))
                            .slice(0, 20) // Ëé∑ÂèñÂâç20‰∏™ÈìæÊé•
                            .map(el => ({
                                url: el.href,
                                text: el.textContent?.trim() || ''
                            }))
                    );
                    
                    if (links.length > 0) {
                        activityLinks = links;
                        console.log(`‚úÖ ‰ΩøÁî®ÈÄâÊã©Âô® "${selector}" ÊâæÂà∞ ${links.length} ‰∏™Ê¥ªÂä®ÈìæÊé•`);
                        break;
                    }
                } catch (error) {
                    continue;
                }
            }

            if (activityLinks.length === 0) {
                console.log('‚ö†Ô∏è Êú™ÊâæÂà∞Ê¥ªÂä®ÈìæÊé•Ôºå‰ΩøÁî®Â§áÁî®ÊñπÊ°à');
                return;
            }

            // Â§ÑÁêÜÊâæÂà∞ÁöÑÊ¥ªÂä®ÈìæÊé•
            for (const linkInfo of activityLinks) {
                if (this.foundActivities.length >= this.targetCount) {
                    break;
                }
                
                console.log(`\nüîç Â§ÑÁêÜÊ¥ªÂä®: ${linkInfo.text}`);
                console.log(`üîó ÈìæÊé•: ${linkInfo.url}`);
                
                const activityData = await this.extractActivityDetails(linkInfo.url);
                
                if (activityData && this.isTargetActivityType(activityData)) {
                    this.foundActivities.push(activityData);
                    console.log(`‚úÖ Â∑≤Êî∂ÈõÜ ${this.foundActivities.length}/${this.targetCount} ‰∏™ÁõÆÊ†áÊ¥ªÂä®`);
                }
                
                // Á§ºË≤åÁ≠âÂæÖ
                await this.page.waitForTimeout(2000);
            }
            
        } catch (error) {
            console.error('‚ùå ÊèêÂèñÊ¥ªÂä®ÈìæÊé•Â§±Ë¥•:', error.message);
        }
    }

    async useBackupActivityUrls() {
        console.log('üÜò ‰ΩøÁî®Â§áÁî®Ê¥ªÂä®URLÂàóË°®...');
        
        // ‰∏Ä‰∫õÂ∑≤Áü•ÁöÑ‰∏ú‰∫¨Ê¥ªÂä®URLÔºàÂü∫‰∫é‰πãÂâçÁöÑÊµãËØïÔºâ
        const backupUrls = [
            'https://www.jalan.net/event/evt_343864/', // Êñ∞Ê©ã„Åì„ÅÑ„Å°Á•≠
            'https://www.jalan.net/event/evt_343865/',
            'https://www.jalan.net/event/evt_343866/',
            'https://www.jalan.net/event/evt_343867/',
            'https://www.jalan.net/event/evt_343868/',
        ];

        for (const url of backupUrls) {
            if (this.foundActivities.length >= this.targetCount) {
                break;
            }
            
            console.log(`\nüîç Â§ÑÁêÜÂ§áÁî®Ê¥ªÂä®: ${url}`);
            
            const activityData = await this.extractActivityDetails(url);
            
            if (activityData && this.isTargetActivityType(activityData)) {
                this.foundActivities.push(activityData);
                console.log(`‚úÖ Â∑≤Êî∂ÈõÜ ${this.foundActivities.length}/${this.targetCount} ‰∏™ÁõÆÊ†áÊ¥ªÂä®`);
            }
            
            await this.page.waitForTimeout(2000);
        }
    }

    async extractActivityDetails(activityUrl) {
        try {
            console.log(`üìÑ Ê≠£Âú®ÊèêÂèñÊ¥ªÂä®ËØ¶ÊÉÖ: ${activityUrl}`);
            
            await this.page.goto(activityUrl, { waitUntil: 'domcontentloaded' });
            await this.page.waitForTimeout(3000);

            // ÊèêÂèñ11È°πÂøÖÈúÄ‰ø°ÊÅØ
            const activityData = await this.page.evaluate(() => {
                const getText = (selector) => {
                    const element = document.querySelector(selector);
                    return element ? element.textContent.trim() : '';
                };

                const getAttr = (selector, attr) => {
                    const element = document.querySelector(selector);
                    return element ? element.getAttribute(attr) : '';
                };

                // ‰ΩøÁî®Â§öÈáçÈÄâÊã©Âô®Á≠ñÁï•ÊèêÂèñ‰ø°ÊÅØ
                const name = getText('h1') || 
                           getText('.title') || 
                           getText('[class*="title"]') || 
                           document.title.split('|')[0].trim();

                const datetime = getText('[class*="date"]') || 
                               getText('[class*="time"]') || 
                               getText('[class*="period"]') ||
                               '';

                const venue = getText('[class*="venue"]') || 
                            getText('[class*="place"]') || 
                            getText('[class*="location"]') ||
                            '';

                const address = getText('[class*="address"]') || 
                              getText('[class*="addr"]') ||
                              '';

                const access = getText('[class*="access"]') || 
                             getText('[class*="transport"]') ||
                             '';

                const organizer = getText('[class*="organizer"]') || 
                                getText('[class*="sponsor"]') ||
                                '';

                const price = getText('[class*="price"]') || 
                            getText('[class*="fee"]') || 
                            getText('[class*="cost"]') ||
                            '';

                const contact = getText('[class*="contact"]') || 
                              getText('[class*="tel"]') || 
                              getText('[class*="phone"]') ||
                              '';

                const description = getText('[class*="description"]') || 
                                  getText('[class*="summary"]') || 
                                  getText('.content') ||
                                  '';

                // ÂùêÊ†á‰ø°ÊÅØ
                let latitude = null, longitude = null;
                const mapLink = getAttr('a[href*="maps.google.com"]', 'href');
                if (mapLink) {
                    const match = mapLink.match(/ll=([0-9.-]+),([0-9.-]+)/);
                    if (match) {
                        latitude = parseFloat(match[1]);
                        longitude = parseFloat(match[2]);
                    }
                }

                return {
                    name: name || 'Ê¥ªÂä®ÂêçÁß∞ÂæÖÁ°ÆËÆ§',
                    datetime: datetime || 'Êó∂Èó¥ÂæÖÁ°ÆËÆ§',
                    venue: venue || 'Âú∞ÁÇπÂæÖÁ°ÆËÆ§',
                    address: address || 'Âú∞ÂùÄÂæÖÁ°ÆËÆ§',
                    access: access || '‰∫§ÈÄöÊñπÂºèÂæÖÁ°ÆËÆ§',
                    organizer: organizer || '‰∏ªÂäûÊñπÂæÖÁ°ÆËÆ§',
                    price: price || 'Ë¥πÁî®ÂæÖÁ°ÆËÆ§',
                    contact: contact || 'ËÅîÁ≥ªÊñπÂºèÂæÖÁ°ÆËÆ§',
                    description: description || 'ÊèèËø∞ÂæÖÁ°ÆËÆ§',
                    latitude,
                    longitude,
                    sourceUrl: window.location.href
                };
            });

            // Á°ÆÂÆöÊ¥ªÂä®Á±ªÂûãÂíåÂú∞Âå∫
            activityData.activityType = this.determineActivityType(activityData.name, activityData.description);
            activityData.region = 'tokyo'; // ‰∏ìÈó®Áà¨Âèñ‰∏ú‰∫¨Ê¥ªÂä®
            
            console.log(`üìä ÊèêÂèñÂÆåÊàê: ${activityData.name} (${activityData.activityType})`);
            
            return activityData;

        } catch (error) {
            console.error(`‚ùå ÊèêÂèñÊ¥ªÂä®ËØ¶ÊÉÖÂ§±Ë¥• ${activityUrl}:`, error.message);
            return null;
        }
    }

    determineActivityType(name, description) {
        const text = `${name} ${description}`.toLowerCase();
        
        for (const [type, keywords] of Object.entries(this.activityTypes)) {
            if (keywords.some(keyword => text.includes(keyword.toLowerCase()))) {
                return type;
            }
        }
        
        return 'culture'; // ÈªòËÆ§ÂΩíÁ±ª‰∏∫ÊñáËâ∫Ê¥ªÂä®
    }

    isTargetActivityType(activityData) {
        // Ê£ÄÊü•ÊòØÂê¶Â±û‰∫éÂÖ≠Â§ßÁ±ªÊ¥ªÂä®‰πã‰∏Ä
        const validTypes = Object.keys(this.activityTypes);
        const isValidType = validTypes.includes(activityData.activityType);
        
        console.log(`üéØ Ê¥ªÂä®Á±ªÂûãÊ£ÄÊü•: ${activityData.activityType} - ${isValidType ? '‚úÖ Á¨¶Âêà' : '‚ùå ‰∏çÁ¨¶Âêà'}`);
        
        return isValidType;
    }

    async saveActivities() {
        console.log('\nüíæ ÂºÄÂßã‰øùÂ≠òÊ¥ªÂä®Âà∞Êï∞ÊçÆÂ∫ì...');
        
        const saveResults = { success: 0, failed: 0 };

        for (const activity of this.foundActivities) {
            try {
                const dbData = {
                    name: activity.name,
                    datetime: activity.datetime,
                    venue: activity.venue,
                    address: activity.address,
                    access: activity.access,
                    organizer: activity.organizer,
                    price: activity.price,
                    contact: activity.contact,
                    description: activity.description,
                    regionId: activity.region,
                    googleMap: activity.latitude && activity.longitude ? 
                             `https://maps.google.com/maps?ll=${activity.latitude},${activity.longitude}` : '',
                    verified: true
                };

                // Ê†πÊçÆÊ¥ªÂä®Á±ªÂûã‰øùÂ≠òÂà∞ÂØπÂ∫îË°®
                switch (activity.activityType) {
                    case 'matsuri':
                        await prisma.matsuriEvent.create({ data: dbData });
                        break;
                    case 'hanabi':
                        await prisma.hanabiEvent.create({ data: dbData });
                        break;
                    case 'hanami':
                        await prisma.hanamiEvent.create({ data: dbData });
                        break;
                    case 'momiji':
                        await prisma.momijiEvent.create({ data: dbData });
                        break;
                    case 'illumination':
                        await prisma.illuminationEvent.create({ data: dbData });
                        break;
                    default:
                        await prisma.cultureArtEvent.create({ data: dbData });
                }

                saveResults.success++;
                console.log(`‚úÖ Â∑≤‰øùÂ≠ò: ${activity.name} (${activity.activityType})`);

            } catch (error) {
                saveResults.failed++;
                console.error(`‚ùå ‰øùÂ≠òÂ§±Ë¥• ${activity.name}:`, error.message);
            }
        }

        console.log(`\nüìä ‰øùÂ≠òÁªìÊûú: ÊàêÂäü ${saveResults.success} ‰∏™ÔºåÂ§±Ë¥• ${saveResults.failed} ‰∏™`);
        
        return saveResults;
    }

    async cleanup() {
        if (this.browser) {
            await this.browser.close();
        }
        await prisma.$disconnect();
    }
}

// ‰∏ªÁ®ãÂ∫è
async function main() {
    console.log('üéØ ‰∏ú‰∫¨Ââç10‰∏™ÂÖ≠Â§ßÁ±ªÊ¥ªÂä®Áà¨ÂèñÁ®ãÂ∫è');
    console.log('üìã ÁõÆÊ†áÔºöÁ•≠ÂÖ∏„ÄÅËä±ÁÅ´„ÄÅËä±ËßÅ„ÄÅÁ∫¢Âè∂„ÄÅÁÅØÂÖâ„ÄÅÊñáËâ∫Ê¥ªÂä®');
    console.log('üìä ÊØè‰∏™Ê¥ªÂä®ÊèêÂèñ11È°πÂÆåÊï¥‰ø°ÊÅØ\n');

    const crawler = new TokyoTop10ActivitiesCrawler();
    await crawler.start();
}

// ËøêË°åÁ®ãÂ∫è
main().catch(error => {
    console.error('Á®ãÂ∫èËøêË°åÂ§±Ë¥•:', error);
    process.exit(1);
}); 