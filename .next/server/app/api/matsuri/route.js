(()=>{var t={};t.id=503,t.ids=[503],t.modules={3295:t=>{"use strict";t.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},10846:t=>{"use strict";t.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},12620:(t,e,a)=>{"use strict";a.d(e,{p:()=>l});let r=require("fs/promises");var s=a.n(r),o=a(33873),i=a.n(o),n=a(72430);class l{constructor(){this.crawler=null,this.dataPath=i().join(process.cwd(),"data","matsuri"),this.ensureDataDirectory()}async getCrawler(){if(!this.crawler){let{MatsuriCrawler:t}=await a.e(2258).then(a.bind(a,12258));this.crawler=new t}return this.crawler}async ensureDataDirectory(){try{await s().mkdir(this.dataPath,{recursive:!0})}catch(t){console.error("Error creating data directory:",t instanceof Error?t.message:String(t))}}getDataFilePath(t="tokyo"){return i().join(this.dataPath,`${t}-matsuri.json`)}async saveMatsuriData(t,e){try{let a=this.getDataFilePath(t),r={lastUpdated:new Date().toISOString(),count:e.length,data:e};await s().writeFile(a,JSON.stringify(r,null,2),"utf-8"),console.log(`Saved ${e.length} matsuri events for ${t}`)}catch(t){throw console.error("Error saving matsuri data:",t instanceof Error?t.message:String(t)),t}}async loadMatsuriData(t="tokyo"){try{let e=this.getDataFilePath(t),a=await s().readFile(e,"utf-8");return JSON.parse(a).data.map(t=>n.L0.parse(t))}catch(e){return console.log(`No existing data found for ${t}, returning empty array`),[]}}async updateMatsuriData(t="tokyo"){let e=this.getDataSourceUrls(t);try{console.log(`Starting data update for ${t}...`);let a=await this.getCrawler(),r=await a.crawl(e);if(r.success&&r.data.length>0){let e=await this.loadMatsuriData(t),a=this.mergeMatsuriData(e,r.data);await this.saveMatsuriData(t,a),console.log(`Successfully updated ${t} matsuri data`)}return r}catch(t){return console.error("Error updating matsuri data:",t instanceof Error?t.message:String(t)),{success:!1,data:[],errors:[`Update error: ${t instanceof Error?t.message:String(t)}`],timestamp:new Date().toISOString(),source:"matsuri-data-service"}}finally{this.crawler&&await this.crawler.cleanup()}}getDataSourceUrls(t){let e={tokyo:["https://omaturilink.com/%E6%9D%B1%E4%BA%AC%E9%83%BD/","https://matcha-jp.com/jp/20117","https://www.on-japan.jp/home/eventinfo/matsuri-info/"],kanagawa:["https://omaturilink.com/%E7%A5%9E%E5%A5%88%E5%B7%9D%E7%9C%8C/"],saitama:["https://omaturilink.com/%E5%9F%BC%E7%8E%89%E7%9C%8C/"]};return e[t]||e.tokyo}mergeMatsuriData(t,e){let a=[...t];return e.forEach(t=>{let e=a.findIndex(e=>e.title===t.title&&e.date===t.date);e>=0?a[e]={...t,likes:a[e].likes,id:a[e].id}:a.push(t)}),a}async getMatsuriStats(t="tokyo"){let e=await this.loadMatsuriData(t),a=new Date;return{total:e.length,byCategory:e.reduce((t,e)=>(t[e.category]=(t[e.category]||0)+1,t),{}),upcoming:e.filter(t=>new Date(t.date)>=a).length,lastUpdated:e.length>0?e[0].lastUpdated:new Date().toISOString()}}async searchMatsuri(t="tokyo",e,a){let r=(await this.loadMatsuriData(t)).filter(t=>t.title.toLowerCase().includes(e.toLowerCase())||t.description.toLowerCase().includes(e.toLowerCase())||t.location.toLowerCase().includes(e.toLowerCase()));return a?.category&&(r=r.filter(t=>t.category===a.category)),a?.startDate&&(r=r.filter(t=>t.date>=a.startDate)),a?.endDate&&(r=r.filter(t=>t.date<=a.endDate)),r}async updateLikes(t,e,a){let r=await this.loadMatsuriData(t),s=r.findIndex(t=>t.id===e);s>=0&&(r[s].likes=a,await this.saveMatsuriData(t,r))}async validateData(t="tokyo"){try{let e=await this.loadMatsuriData(t),a=[],r=[];return e.forEach((t,e)=>{try{n.L0.parse(t)}catch(t){a.push(`Event ${e}: ${t}`)}let s=new Date(t.date),o=new Date,i=new Date(o.getFullYear()-1,o.getMonth(),o.getDate()),l=new Date(o.getFullYear()+2,o.getMonth(),o.getDate());(s<i||s>l)&&r.push(`Event "${t.title}" has unusual date: ${t.date}`),t.website.startsWith("http")||r.push(`Event "${t.title}" has invalid website URL`)}),{isValid:0===a.length,errors:a,warnings:r}}catch(t){return{isValid:!1,errors:[`Validation error: ${t}`],warnings:[]}}}}},24723:(t,e,a)=>{"use strict";a.d(e,{R:()=>i});let r=require("node-cron");var s=a(12620);class o{constructor(){this.tasks=new Map,this.dataService=new s.p}start(){console.log("Starting Matsuri Scheduler..."),this.scheduleTask("monthly-update","0 2 1 * *",async()=>{console.log("Running monthly matsuri data update..."),await this.updateAllPrefectures()}),this.scheduleTask("monthly-validation","0 3 15 * *",async()=>{console.log("Running monthly data validation..."),await this.validateAllData()}),this.scheduleTask("weekly-check","0 1 * * 1",async()=>{await this.checkUpcomingEvents()}),console.log("Matsuri Scheduler started successfully"),console.log("Schedule: Monthly updates (1st), validation (15th), weekly upcoming checks (Monday)")}stop(){console.log("Stopping Matsuri Scheduler..."),this.tasks.forEach((t,e)=>{t.stop(),console.log(`Stopped task: ${e}`)}),this.tasks.clear(),console.log("Matsuri Scheduler stopped")}scheduleTask(t,e,a){let s=r.schedule(e,async()=>{try{console.log(`Executing scheduled task: ${t}`),await a(),console.log(`Completed scheduled task: ${t}`)}catch(e){console.error(`Error in scheduled task ${t}:`,e instanceof Error?e.message:String(e))}},{timezone:"Asia/Tokyo"});this.tasks.set(t,s),s.start(),console.log(`Scheduled task: ${t} with cron: ${e}`)}async updateAllPrefectures(){for(let t of["tokyo","kanagawa","saitama","chiba"])try{console.log(`Updating data for ${t}...`);let e=await this.dataService.updateMatsuriData(t);e.success?console.log(`✅ Successfully updated ${t}: ${e.data.length} events`):console.error(`❌ Failed to update ${t}:`,e.errors),await this.delay(5e3)}catch(e){console.error(`Error updating ${t}:`,e instanceof Error?e.message:String(e))}}async validateAllData(){for(let t of["tokyo","kanagawa","saitama","chiba"])try{console.log(`Validating data for ${t}...`);let e=await this.dataService.validateData(t);e.isValid?console.log(`✅ ${t} data is valid`):console.error(`❌ ${t} data validation failed:`,e.errors),e.warnings.length>0&&console.warn(`⚠️ ${t} data warnings:`,e.warnings)}catch(e){console.error(`Error validating ${t}:`,e instanceof Error?e.message:String(e))}}async checkUpcomingEvents(){try{let t=await this.dataService.getMatsuriStats("tokyo");t.upcoming>0&&console.log(`📅 Found ${t.upcoming} upcoming matsuri events in Tokyo`)}catch(t){console.error("Error checking upcoming events:",t instanceof Error?t.message:String(t))}}async manualUpdate(t="tokyo"){console.log(`Manual update triggered for ${t}`);try{let e=await this.dataService.updateMatsuriData(t);e.success?console.log(`✅ Manual update successful: ${e.data.length} events`):console.error(`❌ Manual update failed:`,e.errors)}catch(t){throw console.error("Manual update error:",t instanceof Error?t.message:String(t)),t}}getStatus(){let t=Array.from(this.tasks.keys()),e={};return this.tasks.forEach((t,a)=>{try{e[a]="Next run time not available"}catch(t){e[a]=`Error getting next run time: ${t instanceof Error?t.message:String(t)}`}}),{isRunning:this.tasks.size>0,activeTasks:t,nextRuns:e}}delay(t){return new Promise(e=>setTimeout(e,t))}async getDataStats(){let t={};for(let e of["tokyo","kanagawa","saitama","chiba"])try{t[e]=await this.dataService.getMatsuriStats(e)}catch(a){t[e]={error:`Failed to get stats: ${a instanceof Error?a.message:String(a)}`}}return t}}let i=new o;process.on("SIGINT",()=>{console.log("Received SIGINT, stopping scheduler..."),i.stop(),process.exit(0)}),process.on("SIGTERM",()=>{console.log("Received SIGTERM, stopping scheduler..."),i.stop(),process.exit(0)})},29021:t=>{"use strict";t.exports=require("fs")},29294:t=>{"use strict";t.exports=require("next/dist/server/app-render/work-async-storage.external.js")},33873:t=>{"use strict";t.exports=require("path")},44870:t=>{"use strict";t.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},49667:t=>{"use strict";t.exports=import("crawlee")},63033:t=>{"use strict";t.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},64302:(t,e,a)=>{"use strict";a.r(e),a.d(e,{patchFetch:()=>E,routeModule:()=>k,serverHooks:()=>D,workAsyncStorage:()=>S,workUnitAsyncStorage:()=>v});var r={};a.r(r),a.d(r,{GET:()=>y,POST:()=>f,dynamic:()=>h});var s=a(96559),o=a(48088),i=a(37719),n=a(24723),l=a(12620),c=a(29021),u=a.n(c),d=a(32190),g=a(33873),p=a.n(g);let h="force-static",m=null;function w(){return m||(m=new l.p),m}async function y(t){try{let{searchParams:e}=new URL(t.url),a=e.get("prefecture")||"tokyo",r=p().join(process.cwd(),"public","data",`${a}-matsuri-data.json`);if(!u().existsSync(r))return d.NextResponse.json({error:"Data file not found",prefecture:a,events:[]},{status:404});let s=JSON.parse(u().readFileSync(r,"utf-8"));return d.NextResponse.json({...s,status:"success",timestamp:new Date().toISOString()})}catch(t){return console.error("Error loading matsuri data:",t),d.NextResponse.json({error:"Failed to load matsuri data",details:t instanceof Error?t.message:"Unknown error"},{status:500})}}async function f(t){try{let e=await t.json(),{action:a,prefecture:r="tokyo"}=e;switch(a){case"update":await n.R.manualUpdate(r);let s=await w().loadMatsuriData(r);return d.NextResponse.json({success:!0,message:`Successfully updated ${r} matsuri data`,count:s.length,timestamp:new Date().toISOString()});case"validate":let o=await w().validateData(r);return d.NextResponse.json({success:!0,validation:o,timestamp:new Date().toISOString()});case"like":let{eventId:i,likes:l}=e;if(!i||"number"!=typeof l)return d.NextResponse.json({success:!1,error:"Missing eventId or likes parameter"},{status:400});return await w().updateLikes(r,i,l),d.NextResponse.json({success:!0,message:"Likes updated successfully",eventId:i,likes:l});default:return d.NextResponse.json({success:!1,error:"Invalid action"},{status:400})}}catch(t){return console.error("API POST Error:",t),d.NextResponse.json({success:!1,error:"Failed to process request",details:t instanceof Error?t.message:"Unknown error"},{status:500})}}let k=new s.AppRouteRouteModule({definition:{kind:o.RouteKind.APP_ROUTE,page:"/api/matsuri/route",pathname:"/api/matsuri",filename:"route",bundlePath:"app/api/matsuri/route"},resolvedPagePath:"C:\\Users\\GAKU\\Desktop\\Kanto Guide\\src\\app\\api\\matsuri\\route.ts",nextConfigOutput:"export",userland:r}),{workAsyncStorage:S,workUnitAsyncStorage:v,serverHooks:D}=k;function E(){return(0,i.patchFetch)({workAsyncStorage:S,workUnitAsyncStorage:v})}},72430:(t,e,a)=>{"use strict";a.d(e,{L0:()=>s});var r=a(45697);let s=r.z.object({id:r.z.string(),title:r.z.string(),japaneseName:r.z.string(),englishName:r.z.string(),date:r.z.string(),endDate:r.z.string().optional(),location:r.z.string(),category:r.z.enum(["大型","中型","小型"]),highlights:r.z.array(r.z.string()),likes:r.z.number().default(0),website:r.z.string().url(),description:r.z.string(),prefecture:r.z.string().default("東京都"),lastUpdated:r.z.string().default(()=>new Date().toISOString()),source:r.z.string().url(),verified:r.z.boolean().default(!1)});r.z.object({name:r.z.string(),url:r.z.string().url(),selector:r.z.string(),fields:r.z.record(r.z.string()),lastCrawled:r.z.string().optional(),isActive:r.z.boolean().default(!0)}),r.z.object({success:r.z.boolean(),data:r.z.array(s),errors:r.z.array(r.z.string()),timestamp:r.z.string(),source:r.z.string()})},78335:()=>{},96487:()=>{}};var e=require("../../../webpack-runtime.js");e.C(t);var a=t=>e(e.s=t),r=e.X(0,[4447,580,5697],()=>a(64302));module.exports=r})();